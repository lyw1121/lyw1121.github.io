<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mySQL-索引类型定义梳理</title>
    <url>/2020/10/19/1/</url>
    <content><![CDATA[<h1 id="一：InnoDB索引底层数据结构简略图"><a href="#一：InnoDB索引底层数据结构简略图" class="headerlink" title="一：InnoDB索引底层数据结构简略图"></a>一：InnoDB索引底层数据结构简略图</h1><p>1、InnoDB存储引擎主键索引实现：</p>
<p><img src="/2020/10/19/1/1603028712969.png" alt="主键索引"> </p>
<p>2、InnoDB存储引擎二级索引实现：</p>
<p><img src="/2020/10/19/1/1603028910751.png" alt="二级索引"></p>
<p>3、联合索引树结构：</p>
<p><img src="/2020/10/19/1/1603380039268.png" alt="联合索引"></p>
<h1 id="二：聚簇索引"><a href="#二：聚簇索引" class="headerlink" title="二：聚簇索引"></a>二：聚簇索引</h1><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>聚簇索引是一种数据存储方式，并不是一种单独的索引类型，在InnoDB中的聚簇索引定义的是 B+Tree索引和数据行 (叶子节点包含了完整的数据记录)</p>
<p>注: InnoDB存储引擎，聚簇索引和主键索引结构和效果相同</p>
<h4 id="优点-提升查询性能-："><a href="#优点-提升查询性能-：" class="headerlink" title="优点 (提升查询性能)："></a>优点 (提升查询性能)：</h4><p>1、可以根据索引字段聚集数据，每次从磁盘读取少量数据叶即可获得需要的绝大部分数据，<strong>减少了磁盘I/O次数</strong>，提升查询效率（利用<strong>磁盘预读原理</strong>：磁盘存取比主存慢，加上机械运动耗费，磁盘的存取速度一般是主存的几百分分之一，为了提高效率，要尽量减少磁盘I/O。为了达到这个目的，磁盘往往<strong>不是严格按需读取</strong>，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的<strong>局部性原理</strong>：当一个数据被用到时，其附近的数据也通常会马上被使用。程序运行期间所需要的数据通常比较集中）</p>
<p>2、数据访问更快，聚簇索引将索引和数据保存在一个文件中（B+Tree），获取数据时，聚簇索引比非聚簇索引查找更快</p>
<h4 id="缺点-客观存在-："><a href="#缺点-客观存在-：" class="headerlink" title="缺点 (客观存在)："></a>缺点 (客观存在)：</h4><p>1、强依赖于主键按顺序插入数据到InnoDB表中，即如果索引数据并未按顺序存储在磁盘页中，当数据加载到内存时，由于数据不连续，需要多次I/O并且把一些不需要的数据也放入内存，耗时，占用内存</p>
<p>2、更新聚簇索引列的代价很高，因为会强制InnoDB将每个被更新的行移动到新的位置，可能造成不必要的叶分裂（当行的主键要求必须将这一行插入到某个已满的叶中时，InnoDB会将该叶分裂成两个页来存储该行，此为一次叶分裂操作）叶分裂会导致表占用更多的磁盘空间</p>
<p>3、聚簇索引可能会导致全表查询慢，当行记录比较稀疏、零散时（叶分裂导致数据存储不连续）</p>
<h1 id="三：覆盖索引"><a href="#三：覆盖索引" class="headerlink" title="三：覆盖索引"></a>三：覆盖索引</h1><h4 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h4><p>如果一个索引包含（覆盖）所有需要查询的字段的值，即称之为 “覆盖索引”</p>
<h4 id="优点-使用覆盖索引的好处"><a href="#优点-使用覆盖索引的好处" class="headerlink" title="优点 (使用覆盖索引的好处)"></a>优点 (使用覆盖索引的好处)</h4><p>1、减少数据的访问量，只需要读取索引，不需要回表查询（不需要从二级索引树查询到主键值再查询一边主键索引树）</p>
<h1 id="四：主键索引"><a href="#四：主键索引" class="headerlink" title="四：主键索引"></a>四：主键索引</h1><h4 id="定义：-2"><a href="#定义：-2" class="headerlink" title="定义："></a>定义：</h4><p>一种特殊的唯一索引，不允许有空值，可以在建表的时候指定主键，默认就会创建主键索引，主键索引在InnoDB存储引擎下，可将主键索引定义为聚簇索引，具有覆盖所有的优点，底层所有结构为上述第一张图所示，主键索引树叶子节点包含了所有的行记录数据，</p>
<p>注：如果没有定义主键，InnoDB会选择一个唯一的非空索引代替，如果没有这样的索引，InnoDB会隐式的定义一个主键作为聚簇索引</p>
<h1 id="五：唯一索引"><a href="#五：唯一索引" class="headerlink" title="五：唯一索引"></a>五：唯一索引</h1><h4 id="定义：-3"><a href="#定义：-3" class="headerlink" title="定义："></a>定义：</h4><p>特殊的普通索引，索引列值必须唯一，允许有空值，如果是联合索引组合的，则列值的组合必须唯一。唯一索引树结构为上述的二级索引结构图，非叶子节点存储索引（唯一）,叶子节点存储索引和对应行记录的主键id</p>
<h1 id="六：联合索引"><a href="#六：联合索引" class="headerlink" title="六：联合索引"></a>六：联合索引</h1><h4 id="定义：-4"><a href="#定义：-4" class="headerlink" title="定义："></a>定义：</h4><p>1、联合索引又称复合索引，是由数据表中的多个字段组合成的一个索引，简略图如上，联合索引在InnoDB存储引擎下，符合最左匹配原则：例如（A、B、C 三个字段，查询条件按照 A 或者 AB 或者 ABC 字段的顺序即可满足最左匹配），在对字段建立索引时，尽量考虑将单个字段索引，建立成联合索引，可提高查询效率</p>
<p>2、联合索引的索引树，其树节点是又多个字段组合而成的</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mySQL-explain列含义解释</title>
    <url>/2020/12/22/2/</url>
    <content><![CDATA[<h2 id="一、explain工具概述"><a href="#一、explain工具概述" class="headerlink" title="一、explain工具概述"></a>一、explain工具概述</h2><p><strong>1、</strong>使用<strong>EXPLAIN</strong>关键字可以模拟优化器执行SQL语句，分析你的查询语句或是结构的性能瓶颈 在 select 语句之前增加 explain 关键字，MySQL 会在查询上设置一个标记，执行查询会返回执行计划的信息，而不是执行这条SQL</p>
<p>参考官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html">https://dev.mysql.com/doc/refman/5.7/en/explain-output.html</a></p>
<p>查看数据表的索引：show index from table_name;</p>
<p>示例：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select id from book_Info where id = 4;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">---------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">| id | select_type | table     | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">---------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">|  1 | SIMPLE      | book_Info | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">---------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.57 sec)</span></span><br></pre></td></tr></table></figure>

<p>注：执行计划选择索引优化是在server层</p>
<h2 id="二、相关DDL"><a href="#二、相关DDL" class="headerlink" title="二、相关DDL"></a>二、相关DDL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> book_info | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book_info`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`book_name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_type`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_price`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_state`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`shop_user_id`</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;shop_user table primary key&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`shop_user_id_index`</span> (<span class="string">`shop_user_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">10</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"> shop_user | CREATE TABLE `shop_user` (</span><br><span class="line">  `id` int(20) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `real_name` varchar(255) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `phone` varchar(45) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `sex` tinyint(2) <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span><span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;性别 1男  2女&#x27;</span>,</span><br><span class="line">  `birthday` int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `name_phone_index` (`real_name`,`phone`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="attribute">AUTO_INCREMENT</span>=4<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"> book  | CREATE TABLE `book` (</span><br><span class="line">  `id` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(10)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_name` (`name`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="attribute">AUTO_INCREMENT</span>=7<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"> book_talk | CREATE TABLE `book_talk` (</span><br><span class="line">  `id` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `book_id` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `talk_id` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `remark` varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_film_actor_id` (`book_id`,`talk_id`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>



<h2 id="三、explain中的列信息"><a href="#三、explain中的列信息" class="headerlink" title="三、explain中的列信息"></a>三、explain中的列信息</h2><p>注：以下表中，id字段是 primary key</p>
<h5 id="1、id列"><a href="#1、id列" class="headerlink" title="1、id列"></a>1、id列</h5><p>id列的编号是select的序列号，有多少个select就有多少个id，并且id的顺序是按照出现的顺序增长的，id列序号值越执行优先级越高，id相同则从上往下执行，id为null最后执行</p>
<h5 id="2、select-type列"><a href="#2、select-type列" class="headerlink" title="2、select_type列"></a>2、select_type列</h5><p>select_type 表示对应行是简单还是复杂的查询</p>
<p>a. <strong>simple</strong>：简单查询，不包含子查询和union</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from book_info where id = 2;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">---------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------</span>+</span><br><span class="line">| id | select_type | table     | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">---------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | book_info | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">---------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.00 sec)</span></span><br></pre></td></tr></table></figure>

<p>b. <strong>primary:</strong> 复杂查询中最外层的select</p>
<p>c. <strong>subquery:</strong> 包含在select中的子查询 (不在from子句中)</p>
<p>d. <strong>derived:</strong> 包含在from子句中的子查询，MySQL会将其结果放在一个临时表中，也可称为派生表</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"># 关闭mysql5<span class="number">.7</span> 新特性对衍生表的合并优化</span><br><span class="line">mysql&gt; <span class="built_in">set</span> session optimizer_switch=&#x27;derived_merge=off&#x27;;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.09</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select (select <span class="number">1</span> from book_info <span class="keyword">where</span> id = <span class="number">2</span>) from (select * from shop_user <span class="keyword">where</span> id =<span class="number">1</span>) su;</span><br><span class="line">+----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------------+</span><br><span class="line">| <span class="type">id</span> | <span class="type">select_type</span> | <span class="type">table</span>      | <span class="type">partitions</span> | <span class="type">type</span>   | <span class="type">possible_keys</span> | <span class="type">key</span>     | <span class="type">key_len</span> | <span class="type">ref</span>   | <span class="type">rows</span> | <span class="type">filtered</span> | <span class="type">Extra</span>       |<span class="type"></span></span><br><span class="line"><span class="type">+----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="type">|  1</span> | <span class="type">PRIMARY</span>     | <span class="type">&lt;derived3</span>&gt; | <span class="type">NULL</span>       | <span class="type">system</span> | <span class="type">NULL</span>          | <span class="type">NULL</span>    | <span class="type">NULL</span>    | <span class="type">NULL</span>  |    <span class="type">1</span> |   <span class="type">100</span><span class="number">.00</span> | <span class="type">NULL</span>        |<span class="type"></span></span><br><span class="line"><span class="type">|  3</span> | <span class="type">DERIVED</span>     | <span class="type">shop_user</span>  | <span class="type">NULL</span>       | <span class="type">const</span>  | <span class="type">PRIMARY</span>       | <span class="type">PRIMARY</span> | <span class="type">4</span>       | <span class="type">const</span> |    <span class="type">1</span> |   <span class="type">100</span><span class="number">.00</span> | <span class="type">NULL</span>        |<span class="type"></span></span><br><span class="line"><span class="type">|  2</span> | <span class="type">SUBQUERY</span>    | <span class="type">book_info</span>  | <span class="type">NULL</span>       | <span class="type">const</span>  | <span class="type">PRIMARY</span>       | <span class="type">PRIMARY</span> | <span class="type">4</span>       | <span class="type">const</span> |    <span class="type">1</span> |   <span class="type">100</span><span class="number">.00</span> | <span class="type">Using</span> index |<span class="type"></span></span><br><span class="line"><span class="type">+----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="type">3</span> rows <span class="built_in">in</span> <span class="built_in">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>

<p>e. <strong>Union：</strong>该行指的是具有和id值的行 M并集N</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select real_name from shop_user union all select id from shop_user;</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------------------+---------+------+------+----------+-------------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> select_type </span>|<span class="string"> table     </span>|<span class="string"> partitions </span>|<span class="string"> type  </span>|<span class="string"> possible_keys </span>|<span class="string"> key              </span>|<span class="string"> key_len </span>|<span class="string"> ref  </span>|<span class="string"> rows </span>|<span class="string"> filtered </span>|<span class="string"> Extra       </span>|</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------------------+---------+------+------+----------+-------------+</span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> PRIMARY     </span>|<span class="string"> shop_user </span>|<span class="string"> NULL       </span>|<span class="string"> index </span>|<span class="string"> NULL          </span>|<span class="string"> name_phone_index </span>|<span class="string"> 904     </span>|<span class="string"> NULL </span>|<span class="string">    3 </span>|<span class="string">   100.00 </span>|<span class="string"> Using index </span>|</span><br><span class="line">|<span class="string">  2 </span>|<span class="string"> UNION       </span>|<span class="string"> shop_user </span>|<span class="string"> NULL       </span>|<span class="string"> index </span>|<span class="string"> NULL          </span>|<span class="string"> name_phone_index </span>|<span class="string"> 904     </span>|<span class="string"> NULL </span>|<span class="string">    3 </span>|<span class="string">   100.00 </span>|<span class="string"> Using index </span>|</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------------------+---------+------+------+----------+-------------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>



<h5 id="3、table列"><a href="#3、table列" class="headerlink" title="3、table列"></a>3、table列</h5><p>这列表示explain的每一行正在访问的表，当from子句中有子查询时，table列是·<derivedN> 格式，表示当前查询依赖id = N的查询，所有会先执行id = N 的查询，当有Union时，table列是&lt;union**M**,**N**&gt; 指的是 行号为M,N的并集查询</derivedN></p>
<h5 id="4、partitions列"><a href="#4、partitions列" class="headerlink" title="4、partitions列"></a>4、partitions列</h5><p>查询将从中匹配记录的分区。该值适用NULL未分区的表, 可参考官方文档</p>
<h5 id="5、type列"><a href="#5、type列" class="headerlink" title="5、type列"></a>5、type列</h5><p>这一列表示关联类型或访问类型，即MySQL如何查找表中的行，查找行记录的大概范围；其值从优到差的排列顺序为：<strong>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</strong>     还可以是NULL</p>
<p><strong>NULL：</strong>MySQL能够在优化阶段分解查询语句，在执行阶段不需要再访问表或者索引，例如：在索引列中查询最大值，优化器可以单独查询索引来完成，不需要再执行时访问表，此时table列为NULL</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select max<span class="params">(id)</span> from shop_user;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">------------------------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                        |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">------------------------------</span>+</span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | Select tables optimized away |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">------------------------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.13 sec)</span></span><br></pre></td></tr></table></figure>



<p><strong>const：</strong>表示查询一张表中最多只有一个匹配行，该行在查询开始时读取，因为只有一行，优化器会进行优化将这一行中的列视为常量，const在<strong>主键索引列或唯一索引</strong>列与常量进行比较时使用，const表非常快，<strong>因为只读取一次</strong>，</p>
<p><strong>system：</strong>是<strong>const</strong>的一个特例，在表里只有一条数据进行查询，如下sql第一行</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from (select * from shop_user <span class="keyword">where</span> id = <span class="number">1</span>) temp;</span><br><span class="line">+----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------+</span><br><span class="line">| <span class="type">id</span> | <span class="type">select_type</span> | <span class="type">table</span>      | <span class="type">partitions</span> | <span class="type">type</span>   | <span class="type">possible_keys</span> | <span class="type">key</span>     | <span class="type">key_len</span> | <span class="type">ref</span>   | <span class="type">rows</span> | <span class="type">filtered</span> | <span class="type">Extra</span> |<span class="type"></span></span><br><span class="line"><span class="type">+----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="type">|  1</span> | <span class="type">PRIMARY</span>     | <span class="type">&lt;derived2</span>&gt; | <span class="type">NULL</span>       | <span class="type">system</span> | <span class="type">NULL</span>          | <span class="type">NULL</span>    | <span class="type">NULL</span>    | <span class="type">NULL</span>  |    <span class="type">1</span> |   <span class="type">100</span><span class="number">.00</span> | <span class="type">NULL</span>  |<span class="type"></span></span><br><span class="line"><span class="type">|  2</span> | <span class="type">DERIVED</span>     | <span class="type">shop_user</span>  | <span class="type">NULL</span>       | <span class="type">const</span>  | <span class="type">PRIMARY</span>       | <span class="type">PRIMARY</span> | <span class="type">4</span>       | <span class="type">const</span> |    <span class="type">1</span> |   <span class="type">100</span><span class="number">.00</span> | <span class="type">NULL</span>  |<span class="type"></span></span><br><span class="line"><span class="type">+----+-------------+------------+------------+--------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="type">2</span> rows <span class="built_in">in</span> <span class="built_in">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>eq_ref：</strong>关联表的组合中，从此表中读取一行。除了system 和 const类型，这是最好的联接类型。当表连接使用索引的所有部分且索引为 <strong>PRIMARY KEY</strong> 或 <strong>UNIQUE  KEY</strong>时使用，最多只会返回一条符合条件的记录；eq_ref 可以用于使用<code>=</code>运算符进行比较的索引列，比较值可以是常量，也可以是使用在此表之前读取的表中列的表达式</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * <span class="keyword">from</span> book_talk left join book on book_talk.book_id = book.id;</span><br><span class="line">+----+-------------+-----------+------------+--------+---------------+---------+---------+----------------------------+------+----------+-------+</span><br><span class="line">| id | select_type | table     | partitions |<span class="built_in"> type </span>  | possible_keys | key     | key_len | ref                        | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-----------+------------+--------+---------------+---------+---------+----------------------------+------+----------+-------+</span><br><span class="line">|  1 |<span class="built_in"> SIMPLE </span>     | book_talk | <span class="literal">NULL</span>       | ALL    | <span class="literal">NULL</span>          | <span class="literal">NULL</span>    | <span class="literal">NULL</span>    | <span class="literal">NULL</span>                       |    1 |   100.00 | <span class="literal">NULL</span>  |</span><br><span class="line">|  1 |<span class="built_in"> SIMPLE </span>     | book      | <span class="literal">NULL</span>       | eq_ref | PRIMARY       | PRIMARY | 4       | bookshop.book_talk.book_id |    1 |   100.00 | <span class="literal">NULL</span>  |</span><br><span class="line">+----+-------------+-----------+------------+--------+---------------+---------+---------+----------------------------+------+----------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> set, 1 <span class="builtin-name">warning</span> (0.00 sec)</span><br></pre></td></tr></table></figure>



<p><strong>ref：</strong>和 eq_ref 相比，简单查询条件或表关联查询的连接条件使用的是普通索引或唯一性索引的前缀部分（联合索引的前一个字段），能够查询到多条记录，即索引和某个值比较会有多条记录符合条件</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from book where name = &#x27;book1&#x27;;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">----------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">----------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">|  1 | SIMPLE      | book  | NULL       | ref  | idx_name      | idx_name | 33      | const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">----------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.00 sec)</span></span><br></pre></td></tr></table></figure>



<p><strong>range：</strong>使用一个索引来检索给定范围的行，范围查询通常出现在in()、between、&gt;、&lt;、&gt;= 等操作</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from book_info where shop_user_id &gt; 1;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">--------------------</span>+<span class="params">--------------------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-----------------------</span>+</span><br><span class="line">| id | select_type | table     | partitions | type  | possible_keys      | key                | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">--------------------</span>+<span class="params">--------------------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-----------------------</span>+</span><br><span class="line">|  1 | SIMPLE      | book_info | NULL       | range | shop_user_id_index | shop_user_id_index | 5       | NULL |    2 |   100.00 | Using index condition |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">--------------------</span>+<span class="params">--------------------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-----------------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.02 sec)</span></span><br></pre></td></tr></table></figure>



<p><strong>index：</strong>如果索引是查询的覆盖索引，并且可用于满足表中所需的所有数据，则仅扫描索引树。在这种情况下，Extra列显示为 Using index。仅索引扫描通常比索引扫描更快， ALL因为索引的大小通常小于表数据</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from book;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">----------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">----------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">|  1 | SIMPLE      | book  | NULL       | index | NULL          | idx_name | 33      | NULL |    7 |   100.00 | Using index |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">----------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.00 sec)</span></span><br></pre></td></tr></table></figure>



<p><strong>All：</strong>即全表扫描，扫描你的聚簇索引的所有叶子节点。通常情况下这需要增加索引来进行优化</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from shop_user;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------</span>+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | shop_user | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |   100.00 | NULL  |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.00 sec)</span></span><br></pre></td></tr></table></figure>



<h5 id="6、possible-keys列"><a href="#6、possible-keys列" class="headerlink" title="6、possible_keys列"></a>6、possible_keys列</h5><p>显示查询可能使用哪些索引来查找，explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中数据不多，mysql认为索引对此查询帮助不大，选择了<strong>全表</strong>查询。如果该列是NULL，则没有相关的索引，在这种情况下，可以创造一个适当的索引来提高查询性能，然后用 explain 查看效果。</p>
<h5 id="7、key列"><a href="#7、key列" class="headerlink" title="7、key列"></a>7、key列</h5><p>这一列显示mysql实际采用哪个索引来优化对该表的访问，如果没有使用索引，则该列是 NULL，如果想强制mysql使用或忽视possible_keys列中的索引，在查询中使用 force index（指定使用哪个索引）、ignore index（指定不使用哪个索引）</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from book ignore index<span class="params">(idx_name)</span> where name = &#x27;book0&#x27;;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">|  1 | SIMPLE      | book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    7 |    14.29 | Using where |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.01 sec)</span></span><br></pre></td></tr></table></figure>



<h5 id="8、key-len列"><a href="#8、key-len列" class="headerlink" title="8、key_len列"></a>8、key_len列</h5><p>这一列显示了mysql在索引里使用的字节数，通过这个值可以算出具体使用了索引中的哪些列key_len计算规则如下：<br><strong>字符串</strong>，char(n)和varchar(n)，5.0.3以后版本中，n均代表字符数，而不是字节数，如果是utf-8，一个数字<br>或字母占1个字节，一个汉字占3个字节<br>char(n)：如果存汉字长度就是 3n 字节<br>varchar(n)：如果存汉字则长度是 3n + 2 字节，加的2字节用来存储字符串长度，因为varchar是变长字符串<br><strong>数值类型</strong><br>tinyint：1字节；smallint：2字节；int：4字节；bigint：8字节　<br><strong>时间类型</strong><br>date：3字节；timestamp：4字节；datetime：8字节<br>如果字段允许为 NULL，需要1字节记录是否为 NULL，索引最大长度是<strong>768字节</strong>，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from shop_user where real_name = &#x27;Tom&#x27;;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">------------------</span>+<span class="params">------------------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------</span>+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys    | key              | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">------------------</span>+<span class="params">------------------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | shop_user | NULL       | ref  | name_phone_index | name_phone_index | 767     | const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-----------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">------------------</span>+<span class="params">------------------</span>+<span class="params">---------</span>+<span class="params">-------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.00 sec)</span></span><br></pre></td></tr></table></figure>



<h5 id="9、ref列"><a href="#9、ref列" class="headerlink" title="9、ref列"></a>9、ref列</h5><p>这一列显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常量），字段名（例：book.id）示例可参考如上</p>
<h5 id="10、rows"><a href="#10、rows" class="headerlink" title="10、rows"></a>10、rows</h5><p>这一列是mysql估计要读取并检测的行数，但这个不是结果集里的行数。对于InnoDB表，此数字是估计值，可能并不总是准确的</p>
<h5 id="10、Extra"><a href="#10、Extra" class="headerlink" title="10、Extra"></a>10、Extra</h5><p>这一列展示的是额外信息。常见的重要值如下：</p>
<p>a、 Using index：使用到了覆盖索引</p>
<p>b、Using where：使用 where 语句来处理结果，查询的列没有被索引覆盖</p>
<p>c、Using index condition：索引下推，查询的列不完全被索引覆盖（联合索引）where条件中是一个前导列的范围</p>
<p>d、Using temporary：mysql需要创建一张临时表来处理查询。出现这种情况一般是要进行优化的，可以添加合适的索引来优化。</p>
<p>e、Using filesort：将用外部排序（归并排序）而不是内存排序（快速排序），数据较小时从内存排序，否则需要在磁盘完成排序。这种情况下一般也是要考虑使用索引来优化的</p>
<p>f、Select tables optimized away：使用某些聚合函数（比如 max、min）来访问存在索引的某个字段</p>
<p>注：部分示例可在上述SQL查找</p>
]]></content>
      <tags>
        <tag>mysql explain</tag>
      </tags>
  </entry>
</search>
